{"version":3,"sources":["resources/artyom.jpg","components/Navigation/Menu.tsx","components/Source/Blog.ts","components/Utils/Date.ts","components/Page/Container.tsx","components/Page/Blog.tsx","components/Page/Careers.tsx","components/Page/Contacts.tsx","components/Page/Main.tsx","registerServiceWorker.ts","index.tsx","components/App.tsx"],"names":["module","exports","className","id","to","BASE_URL","REQUEST_CONFIG","headers","Blog","Promise","resolve","axios","get","then","res","data","catch","DateUtil","dateStr","arr","split","year","month","day","Date","parseInt","date","parseDateFromString","Intl","DateTimeFormat","format","props","title","content","DATE_COMPARATOR","item1","item2","state","items","BlogSource","getList","setState","this","getItems","sort","map","item","key","href","link","target","rel","linkCaption","React","Component","DATE_FORMAT","careers","site","dates","date1","date2","string1","toLocaleDateString","prepareDates","post","description","tools","titles","contacts","value","LINKS","REL","CONTENT_BLOCK","PAGE_CONTENT","src","img","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","error","ReactDOM","render","exact","path","component","Main","Careers","Contacts","document","getElementById","URL","process","toString","origin","addEventListener","fetch","response","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1213a298.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/artyom.bbb441b2.jpg\";","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './Menu.scss';\n\n/**\n * Navigation menu\n */\nexport default () => {\n    return (\n        <div className=\"flexBox nav-menu__root\" id=\"menu\">\n            <Link className=\"nav-menu__item\" to=\"/\">Main</Link>\n            <Link className=\"nav-menu__item\" to=\"/blog\">Blog</Link>\n            <Link className=\"nav-menu__item\" to=\"/careers\">Careers</Link>\n            <Link className=\"nav-menu__item\" to=\"/contacts\">Contacts</Link>\n        </div>\n    );\n}\n","import axios from 'axios';\nimport IBlog from './IBlog';\n\nconst BASE_URL = `https://shielded-brushlands-46595.herokuapp.com/blog/`;\nconst REQUEST_CONFIG = { headers: { 'x-requested-with': 'xhr' } };\n\ninterface IListResponse {\n    data: IBlog[];\n}\n\ninterface IGetResponse {\n    data: IBlog;\n}\n\n/**\n * Blog List Source\n */\nexport default class Blog {\n\n    /**\n     * Get all Blog records\n     */\n    public static getList(): Promise<IBlog[]> {\n        return new Promise((resolve) => {\n            axios.get(BASE_URL, REQUEST_CONFIG)\n                .then((res: IListResponse) => {\n                    resolve(res.data || []);\n                })\n                .catch(() => resolve([]));\n        });\n    }\n\n    /**\n     * Get single Blog record\n     * @param {String} id to find record\n     */\n    public static getById(id: string): Promise<IBlog | void> {\n        return new Promise((resolve) => {\n            axios.get(`${BASE_URL}/${id}`, REQUEST_CONFIG)\n                .then((res: IGetResponse) => {\n                    resolve(res.data || null);\n                })\n                .catch(() => resolve());\n        });\n    }\n}\n","/**\n * Date utilities\n */\nexport default class DateUtil {\n\n    /**\n     * Create Date from date string.\n     * @param dateStr source string with %YYYY-MM-DD% format. Day is optional.\n     */\n    public static parseDateFromString(dateStr: string): Date | null {\n        if (!dateStr) {\n            return null;\n        }\n        const arr = dateStr.split('-');\n        const year = arr[0];\n        const month = arr[1];\n        const day = arr[2] || '1';\n        if (!year || !month) {\n            return null;\n        }\n        return new Date(parseInt(year, 10), parseInt(month, 10) - 1, parseInt(day, 10));\n    }\n\n    public static format(dateStr: string): string {\n        const date = DateUtil.parseDateFromString(dateStr);\n        return date\n            ? new Intl.DateTimeFormat('en-GB', {\n                day: '2-digit',\n                month: 'long',\n                year: 'numeric'\n            }).format(date)\n            : '';\n    }\n}","import React, {ReactNode} from 'react';\nimport './Container.scss';\n\n/**\n * Container properties interface\n */\ninterface IProperties {\n    title: string;\n    content: ReactNode;\n}\n\n/**\n * Page container with title\n * @param props\n */\nexport default (props: IProperties) => {\n    return (\n        <div className=\"page-container__root\">\n            <h2>{props.title}</h2>\n            <div>{props.content}</div>\n        </div>\n    );\n}","import React from 'react';\nimport BlogSource from '../Source/Blog';\nimport IBlog from '../Source/IBlog';\nimport DateUtil from '../Utils/Date';\nimport './Blog.scss';\nimport Container from './Container';\n\nconst DATE_COMPARATOR = (item1: IBlog, item2: IBlog): number => {\n    // TODO: Migrate to normal Date format https://github.com/Artyom-Ganev/artyom-ganev-src/issues/83\n    const date1 = DateUtil.parseDateFromString(`${item1.year}-${item1.month}-${item1.day}`) || new Date();\n    const date2 = DateUtil.parseDateFromString(`${item2.year}-${item2.month}-${item2.day}`) || new Date();\n    return date1 < date2 ? 1 : -1;\n};\n\n/**\n * Blog page\n */\nexport default class Blog extends React.Component {\n    public state: { items: IBlog[] } = { items: [] };\n\n    public componentDidMount() {\n        BlogSource.getList().then((items: IBlog[]) => {\n            this.setState({ items });\n        });\n    }\n\n    public render() {\n        const content = <div className=\"flexBox flexColumn\">{this.getItems()}</div>;\n        return <Container title=\"Blog\" content={content}/>;\n    }\n\n    /**\n     * Blog items markup\n     */\n    private getItems() {\n        return this.state.items.sort(DATE_COMPARATOR).map((item: IBlog) => {\n            return (\n                <div key={item.id} className=\"page-blog__itemContainer\">\n                    <div\n                        className=\"page-blog__title\">{DateUtil.format(`${item.year}-${item.month}-${item.day}`)}</div>\n                    <div className=\"page-blog__item\">{item.title}</div>\n                    <a href={item.link} target=\"_blank\" rel=\"noopener noreferrer\">{item.linkCaption}</a>\n                </div>\n            );\n        });\n    }\n}","import React from 'react';\nimport careers from '../../resources/careers.json';\nimport DateUtil from '../Utils/Date';\nimport './Careers.scss';\nimport Container from './Container';\n\nconst DATE_FORMAT = {\n    month: 'long',\n    year: 'numeric'\n};\n\n/**\n * Career dates formatting\n * @param dates - Starting and Ending of Career item\n */\nconst prepareDates = (dates: string[]): string => {\n    const date1 = DateUtil.parseDateFromString(dates[0]);\n    const date2 = DateUtil.parseDateFromString(dates[1]);\n    if (date1) {\n        const string1 = date1.toLocaleDateString('en-US', DATE_FORMAT);\n        if (date2) {\n            return `${string1} - ${date2.toLocaleDateString('en-US', DATE_FORMAT)}`;\n        }\n        return `Since ${string1}`;\n    }\n    return '';\n};\n\n/**\n * Prepare Career item title. Wraps company name with link if site exists.\n * @param site - company site\n * @param title - company name\n */\nconst prepareTitle = (site: string | undefined, title: string | undefined) => {\n    if (site) {\n        return (\n            <a href={site} target=\"_blank\" rel=\"noopener noreferrer\">\n                <h3 className=\"page-careers__title\">{title}</h3>\n            </a>\n        );\n    }\n    return <h3 className=\"page-careers__title\">{title}</h3>;\n};\n\n/**\n * Careers items markup\n */\nconst items = careers.data.map((item) => {\n    return (\n        <div key={item.key} className=\"page-careers__item\">\n            {prepareTitle(item.site, item.title)}\n            <div className=\"page-careers__dates\">{prepareDates(item.dates)}</div>\n            <div className=\"\">{item.post}</div>\n            <div className=\"\">{item.description}</div>\n            <div className=\"flexBox flexColumn\">\n                <div className=\"\">{item.tools}</div>\n            </div>\n        </div>\n    );\n});\n\n/**\n * Page content\n */\nconst content = <div className=\"flexBox flexColumn\">{items}</div>;\n\n/**\n * Careers page\n */\nexport default () => {\n    return <Container title=\"Careers\" content={content}/>;\n\n}\n","import React from 'react';\nimport contacts from '../../resources/contacts.json';\nimport './Contacts.scss';\nimport Container from './Container';\n\n/**\n * Contact options interface\n */\ninterface IContact {\n    key: string;\n    value: string;\n    link: string;\n    title: string;\n}\n\n/**\n * Contacts titles markup\n */\nconst titles = contacts.data.map((item: IContact) => {\n    return <div key={item.key}>{item.value}:&nbsp;</div>;\n});\n\n/**\n * Contacts items markup\n */\nconst items = contacts.data.map((item: IContact) => {\n    return (\n        <div key={item.key}>\n            <a href={item.link} target=\"_blank\" rel=\"noopener noreferrer\">{item.title}</a>\n        </div>\n    );\n});\n\n/**\n * Page content\n */\nconst content = (\n    <div className=\"flexBox alignItemsBaseline page-careers__item\">\n        <div>{titles}</div>\n        <div>{items}</div>\n    </div>\n);\n\n/**\n * Contacts page\n */\nexport default () => {\n    return <Container title=\"Contacts and Social\" content={content}/>;\n}\n","import React from 'react';\nimport img from '../../resources/artyom.jpg';\nimport './Main.scss';\n\nconst BLANK = '_blank';\n\nconst LINKS = {\n    Back: 'https://github.com/Artyom-Ganev/artyom-ganev-server',\n    Front: 'https://github.com/Artyom-Ganev/artyom-ganev-src',\n    Rybinsk: 'https://en.wikipedia.org/wiki/Rybinsk'\n};\n\nconst REL = 'noopener noreferrer';\n\nconst CONTENT_BLOCK = 'page-main__contentBlock';\n\n/**\n * Main page\n */\nconst PAGE_CONTENT = (\n    <div className='page-main__root'>\n        <img className=\"page-main__image\" src={img} alt=\"Artyom\" title=\"artyom.jpg\"/>\n        <h2 className={CONTENT_BLOCK}>Hi! My name is Artyom.</h2>\n        <div className={CONTENT_BLOCK}>\n            <div>\n                I'm a programmer, based in&nbsp;\n                <a href={LINKS.Rybinsk} target={BLANK} rel={REL}>Rybinsk</a>,&nbsp;Russia. There are some facts\n                about me on this site.\n            </div>\n        </div>\n        <div className={CONTENT_BLOCK}>\n            <div>You can contact me if you have some ideas for it's improvement or have found bugs, typos etc. I'm\n                still working on it.\n            </div>\n        </div>\n        <div className={CONTENT_BLOCK}>\n            Frontend of this site is based on React, TypeScript and Sass, the sources of this part are\n            located on GitHub&nbsp;\n            <a href={LINKS.Front} target={BLANK} rel={REL}>here</a>.\n        </div>\n        <div className={CONTENT_BLOCK}>\n            Backend uses Spring Boot, Maven, Heroku and PostgreSQL and is located&nbsp;\n            <a href={LINKS.Back} target={BLANK} rel={REL}>here</a>.\n        </div>\n    </div>\n);\n\nexport default () => PAGE_CONTENT;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.scss';\nimport registerServiceWorker from './registerServiceWorker';\n\n/**\n * Site root\n */\nReactDOM.render(<App/>, document.getElementById('root') as HTMLElement);\nregisterServiceWorker();","import React from 'react';\nimport {HashRouter, Route} from 'react-router-dom';\nimport Menu from './Navigation/Menu';\nimport Blog from './Page/Blog';\nimport Careers from './Page/Careers';\nimport Contacts from './Page/Contacts';\nimport Main from './Page/Main';\n\n/**\n * Main application\n */\nexport default () => {\n    return (\n        <HashRouter>\n            <div className=\"flexBox flexColumn\">\n                <Menu/>\n                <Route exact={true} path=\"/\" component={Main}/>\n                <Route path=\"/blog\" component={Blog}/>\n                <Route path=\"/careers\" component={Careers}/>\n                <Route path=\"/contacts\" component={Contacts}/>\n            </div>\n        </HashRouter>\n    );\n}\n"],"sourceRoot":""}