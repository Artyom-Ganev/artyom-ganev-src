{"version":3,"sources":["resources/artyom.jpg","components/Navigation/Menu.tsx","components/Page/Container.tsx","components/Page/About.tsx","components/Utils/Const.ts","components/Utils/Date.ts","components/Utils/PagesCache.ts","components/Model/Source.ts","components/Navigation/LoadingIndicator.tsx","components/Page/AbstractPage.tsx","components/Page/Blog.tsx","components/Page/Career.tsx","components/Page/Contacts.tsx","components/Page/Main.tsx","components/Page/NotFound.tsx","registerServiceWorker.ts","index.tsx","components/App.tsx"],"names":["module","exports","items","name","url","map","className","to","key","id","isNarrow","window","innerWidth","Container","state","narrow","addEventListener","this","onResize","bind","removeEventListener","props","contentClass","title","content","setState","React","Component","bio","data","value","BLANK","REL","DateUtil","dateStr","arr","split","year","month","day","Date","parseInt","date","parseDateFromString","Intl","DateTimeFormat","format","PagesCache","cache","Map","instance","getTime","set","get","REQUEST_CONFIG","headers","CACHE","getInstance","Source","pageName","baseUrl","cachedData","Promise","resolve","axios","then","catch","AbstractPage","loaded","source","getPageName","getBaseUrl","getList","getContent","getTitle","charAt","toUpperCase","substr","length","DATE_COMPARATOR","item1","item2","Blog","getItems","sort","link","linkCaption","href","target","rel","DATE_FORMAT","Career","site","startDate","endDate","post","description","tools","header","prepareTitle","start","end","string1","toLocaleDateString","prepareDates","titles","contacts","LINKS","CONTENT_BLOCK","PAGE_CONTENT","src","img","alt","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","error","ReactDOM","render","exact","path","component","Main","About","Contacts","NotFound","document","getElementById","URL","process","toString","origin","fetch","response","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c4282c3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/artyom.bbb441b2.jpg\";","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './Menu.scss';\n\nconst PAGES = [\n    {name: 'Main', url: ''},\n    {name: 'About', url: 'about'},\n    {name: 'Blog', url: 'blog'},\n    {name: 'Career', url: 'career'},\n    {name: 'Contacts', url: 'contacts'}\n];\n\nconst items = PAGES.map(({name, url}) => <Link className=\"nav-menu__item\" to={`/${url}`} key={name}>{name}</Link>);\n\n/**\n * Navigation menu\n */\nexport default () => <div className=\"flexBox nav-menu__root\" id=\"menu\">{items}</div>;\n","import React, {ReactNode} from 'react';\nimport './Container.scss';\n\n/**\n * Container properties interface\n */\ninterface IProperties {\n    title?: string;\n    content: ReactNode;\n    className?: string;\n}\n\nconst isNarrow = () => window.innerWidth <= 800;\n\n/**\n * Page container with title\n */\nexport default class Container extends React.Component<IProperties> {\n    public state: { narrow: boolean } = {narrow: isNarrow()};\n\n    public componentDidMount() {\n        window.addEventListener('resize', this.onResize.bind(this));\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener('resize', this.onResize);\n    }\n\n    public render() {\n        let className = this.props.className;\n        className = className ? ` ${className} ` : ' ';\n        const contentClass = `flexBox flexColumn${className}page-container__root${this.state.narrow ? '--narrow' : ''}`;\n        const {title, content} = this.props;\n        return (\n            <div className={contentClass}>\n                {title && <h2>{title}</h2>}\n                <div>{content}</div>\n            </div>\n        );\n    }\n\n    private onResize() {\n        const narrow = isNarrow();\n        if (this.state.narrow !== narrow) {\n            this.setState({narrow});\n        }\n    }\n}\n\n\n","/**\n * About page\n */\nimport React from 'react';\nimport bio from '../../resources/bio.json';\nimport './About.scss';\nimport Container from './Container';\n\nconst items = bio.data.map((value: string, key: number) => (\n    <div key={key} className='page-bio__item'>{value}</div>\n));\n\nexport default () => <Container title='Artyom Ganev' content={items}/>;","export const BLANK = '_blank';\n\nexport const REL = 'noopener noreferrer';","/**\n * Date utilities\n */\nexport default class DateUtil {\n\n    /**\n     * Create Date from date string.\n     * @param dateStr source string with %YYYY-MM-DD% format. Day is optional.\n     */\n    public static parseDateFromString(dateStr: string): Date | null {\n        if (!dateStr) {\n            return null;\n        }\n        const arr = dateStr.split('-');\n        const year = arr[0];\n        const month = arr[1];\n        const day = arr[2] || '1';\n        if (!year || !month) {\n            return null;\n        }\n        return new Date(parseInt(year, 10), parseInt(month, 10) - 1, parseInt(day, 10));\n    }\n\n    public static format(dateStr: string): string {\n        const date = DateUtil.parseDateFromString(dateStr);\n        return date\n            ? new Intl.DateTimeFormat('en-GB', {\n                day: '2-digit',\n                month: 'long',\n                year: 'numeric'\n            }).format(date)\n            : '';\n    }\n}","interface IValue {\n    value: unknown;\n    date: number;\n}\n\n/**\n * Simple memory cache for site pages\n * @singleton\n */\nexport default class PagesCache {\n\n    /**\n     * Get cache instance\n     */\n    public static getInstance(): PagesCache {\n        if (!PagesCache.instance) {\n            PagesCache.instance = new PagesCache();\n        }\n\n        return PagesCache.instance;\n    }\n\n    private static instance: PagesCache;\n    private cache: Map<string, IValue>;\n\n    private constructor() {\n        this.cache = new Map<string, IValue>();\n    }\n\n    /**\n     * Save value to cache\n     * @param key\n     * @param value to set\n     */\n    public set<T>(key: string, value: T): void {\n        const date = new Date().getTime();\n        this.cache.set(key, { value, date });\n    }\n\n    /**\n     * Get value from cache\n     * @param key\n     */\n    public get<T>(key: string): T {\n        return this.cache.get(key)?.value as T;\n    }\n}\n","import axios, { AxiosResponse } from 'axios';\nimport PagesCache from '../Utils/PagesCache';\n\nconst REQUEST_CONFIG = { headers: { 'x-requested-with': 'xhr' } };\nconst CACHE = PagesCache.getInstance();\n\n/**\n * Page source class\n * @abstract\n */\nexport default class Source<TPage = object> {\n   private readonly pageName: string;\n   private readonly baseUrl: string;\n\n   constructor(pageName: string, baseUrl: string) {\n      this.pageName = pageName;\n      this.baseUrl = baseUrl;\n   }\n\n   /**\n    * Get all records\n    */\n   public getList(): Promise<TPage[]> {\n      const cachedData = CACHE.get<TPage[]>(this.pageName);\n      if (cachedData) {\n         return Promise.resolve(cachedData);\n      }\n\n      return new Promise((resolve) => {\n         axios.get<TPage[]>(this.baseUrl, REQUEST_CONFIG)\n            .then(({ data }: AxiosResponse<TPage[]>) => {\n               CACHE.set<TPage[]>(this.pageName, data);\n               resolve(data);\n            })\n            .catch(() => resolve([]));\n      });\n   }\n\n   /**\n    * Get single record\n    * @param {String} id to find record\n    */\n   public getById(id: string): Promise<TPage> {\n      return new Promise((resolve) => {\n         axios.get<TPage>(`${this.baseUrl}/${id}`, REQUEST_CONFIG)\n            .then(({ data }: AxiosResponse<TPage>) => {\n               resolve(data);\n            })\n            .catch(() => resolve());\n      });\n   }\n}\n","import React from 'react';\nimport './LoadingIndicator.scss';\n\n/**\n * Simple loading indicator based on SVG-image\n */\nexport default () => (\n    <div className=\"flexBox flexGrow-1 flexShrink-1 justifyContentCenter\">\n        <div className=\"nav-loading__indicator\"/>\n    </div>\n);\n","import React, {ReactNode} from 'react';\nimport Source from '../Model/Source';\nimport LoadingIndicator from '../Navigation/LoadingIndicator';\nimport Container from './Container';\n\n/**\n * Base component for all pages with source\n * @abstract\n */\nexport default abstract class AbstractPage<TPage> extends React.Component {\n    public state: { items: TPage[] } = {items: []};\n    private loaded: boolean = false;\n    private readonly source: Source<TPage> = new Source<TPage>(this.getPageName(), this.getBaseUrl());\n\n    public componentDidMount(): void {\n        this.source.getList().then((items: TPage[]) => {\n            this.loaded = true;\n            this.setState({items});\n        });\n    }\n\n    public render(): ReactNode {\n        const content = this.loaded ? this.getContent() : <LoadingIndicator/>;\n        return <Container title={this.getTitle()} content={content}/>;\n    }\n\n    /**\n     * Get page name\n     */\n    protected abstract getPageName(): string;\n\n    /**\n     * Get page backend url\n     */\n    protected abstract getBaseUrl(): string;\n\n    /**\n     * Get page content\n     */\n    protected abstract getContent(): ReactNode;\n\n    /**\n     * Get page title\n     */\n    private getTitle(): string {\n        const pageName = this.getPageName();\n        return `${pageName.charAt(0).toUpperCase()}${pageName.substr(1, pageName.length - 1)}`;\n    }\n}\n","import {ReactNode} from 'react';\nimport React from 'react';\nimport IBlog from '../Model/IBlog';\nimport {BLANK, REL} from '../Utils/Const';\nimport DateUtil from '../Utils/Date';\nimport AbstractPage from './AbstractPage';\nimport './Blog.scss';\n\nconst DATE_COMPARATOR = (item1: IBlog, item2: IBlog): number => {\n    // TODO: Migrate to normal Date format https://github.com/Artyom-Ganev/artyom-ganev-src/issues/83\n    const date1 = DateUtil.parseDateFromString(`${item1.year}-${item1.month}-${item1.day}`) || new Date();\n    const date2 = DateUtil.parseDateFromString(`${item2.year}-${item2.month}-${item2.day}`) || new Date();\n    return date1 < date2 ? 1 : -1;\n};\n\nconst PAGE_NAME = 'blog';\nconst BASE_URL = `https://shielded-brushlands-46595.herokuapp.com/blog/`;\n\n/**\n * Blog page\n */\nexport default class Blog extends AbstractPage<IBlog> {\n\n    protected getContent(): ReactNode {\n        return <div className='flexBox flexColumn'>{this.getItems()}</div>;\n    }\n\n    protected getBaseUrl(): string {\n        return BASE_URL;\n    }\n\n    protected getPageName(): string {\n        return PAGE_NAME;\n    }\n\n    /**\n     * Blog items markup\n     */\n    private getItems() {\n        return this.state.items.sort(DATE_COMPARATOR).map(({id, year, month, day, title, link, linkCaption}: IBlog) => (\n            <div key={id} className='page-blog__itemContainer'>\n                <div className='page-blog__title'>{DateUtil.format(`${year}-${month}-${day}`)}</div>\n                <div className='page-blog__item'>{title}</div>\n                <a href={link} target={BLANK} rel={REL}>{linkCaption}</a>\n            </div>\n        ));\n    }\n}\n","import React, {ReactNode} from 'react';\nimport ICareer from '../Model/ICareer';\nimport {BLANK, REL} from '../Utils/Const';\nimport AbstractPage from './AbstractPage';\nimport './Career.scss';\n\nconst DATE_FORMAT = {\n    month: 'long',\n    year: 'numeric'\n};\n\nconst PAGE_NAME = 'career';\nconst BASE_URL = `https://shielded-brushlands-46595.herokuapp.com/career/`;\n\n/**\n * Career dates formatting\n * @param {Date} start - Star date\n * @param {Date} end - End date\n */\nconst prepareDates = (start: Date, end: Date): string => {\n    if (start) {\n        const startDate = new Date(start);\n        const string1 = startDate.toLocaleDateString('en-US', DATE_FORMAT);\n        if (end) {\n            const endDate = new Date(end);\n            return `${string1} - ${endDate.toLocaleDateString('en-US', DATE_FORMAT)}`;\n        }\n        return `Since ${string1}`;\n    }\n    return '';\n};\n\n/**\n * Prepare Career item title. Wraps company name with link if site exists.\n * @param site - company site\n * @param title - company name\n */\nconst prepareTitle = (site: string | undefined, title: string | undefined) => {\n    const header = <h3 className='page-career__title'>{title}</h3>;\n    return site ? <a href={site} target={BLANK} rel={REL}>{header}</a> : title;\n};\n\n/**\n * Career page\n */\nexport default class Career extends AbstractPage<ICareer> {\n    public state: { items: ICareer[] } = {items: []};\n\n    protected getBaseUrl(): string {\n        return BASE_URL;\n    }\n\n    protected getPageName(): string {\n        return PAGE_NAME;\n    }\n\n    protected getContent(): ReactNode {\n        /**\n         * Career items markup\n         */\n        const items = this.state.items.map(({id, site, title, startDate, endDate, post, description, tools}: ICareer) => (\n            <div key={id} className='page-career__item'>\n                {prepareTitle(site, title)}\n                <div className='page-career__dates'>{prepareDates(startDate, endDate)}</div>\n                <div className=''>Post:&nbsp;{post}</div>\n                <div className=''>{description}</div>\n                <div className='flexBox flexColumn'>\n                    <div className=''>Tools:&nbsp;{tools}</div>\n                </div>\n            </div>\n        ));\n        return <div className='flexBox flexColumn'>{items}</div>;\n    }\n}\n","import React from 'react';\nimport contacts from '../../resources/contacts.json';\nimport {BLANK, REL} from '../Utils/Const';\nimport './Contacts.scss';\nimport Container from './Container';\n\n/**\n * Contact options interface\n */\ninterface IContact {\n    key: string;\n    value: string;\n    link: string;\n    title: string;\n}\n\n/**\n * Contacts titles markup\n */\nconst titles = contacts.data.map(({key, value}: IContact) => (\n    <div key={key}>{value}:&nbsp;</div>\n));\n\n/**\n * Contacts items markup\n */\nconst items = contacts.data.map(({key, link, title}: IContact) => (\n    <div key={key}>\n        <a href={link} target={BLANK} rel={REL}>{title}</a>\n    </div>\n));\n\n/**\n * Page content\n */\nconst content = (\n    <div className='flexBox alignItemsBaseline justifyContentBetween page-contacts__root'>\n        <div>{titles}</div>\n        <div className='page-contacts__item'>{items}</div>\n    </div>\n);\n\n/**\n * Contacts page\n */\nexport default () => <Container title='Contacts and Social' content={content}/>;\n","import React from 'react';\nimport img from '../../resources/artyom.jpg';\nimport {BLANK, REL} from '../Utils/Const';\nimport Container from './Container';\nimport './Main.scss';\n\nconst LINKS = {\n    Back: 'https://github.com/Artyom-Ganev/artyom-ganev-server',\n    Front: 'https://github.com/Artyom-Ganev/artyom-ganev-site',\n    Rybinsk: 'https://en.wikipedia.org/wiki/Rybinsk'\n};\n\nconst CONTENT_BLOCK = 'page-main__contentBlock';\n\n/**\n * Main page\n */\nconst PAGE_CONTENT = (\n    <div className='page-main__root'>\n        <img className='page-main__image' src={img} alt='Artyom' title='artyom.jpg'/>\n        <h2 className={CONTENT_BLOCK}>Hi! My name is Artyom.</h2>\n        <div className={CONTENT_BLOCK}>\n            I'm a programmer, based in&nbsp;\n            <a href={LINKS.Rybinsk} target={BLANK} rel={REL}>Rybinsk</a>,&nbsp;Russia. There are some facts\n            about me on this site.\n        </div>\n        <div className={CONTENT_BLOCK}>\n            You can contact me if you have some ideas for it's improvement or if you find some bugs, typos etc. I'm\n            still working on it.\n        </div>\n        <div className={CONTENT_BLOCK}>\n            Frontend of this site is based on React, TypeScript and Sass, the sources of this part are\n            located on GitHub&nbsp;\n            <a href={LINKS.Front} target={BLANK} rel={REL}>here</a>.\n        </div>\n        <div className={CONTENT_BLOCK}>\n            Backend uses Spring Boot, Maven, Heroku and PostgreSQL and is located&nbsp;\n            <a href={LINKS.Back} target={BLANK} rel={REL}>here</a>.\n        </div>\n    </div>\n);\n\nexport default () => <Container content={PAGE_CONTENT}/>;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport Container from './Container';\nimport './NotFound.scss';\n\nconst TEXT = 'Page Not Found';\n\nconst content = (\n    <div className=\"page-notFound__item\">\n        <Link to=\"/\">Go to main page</Link>\n    </div>\n);\n\nexport default () => (\n    <Container title={TEXT} content={content}/>\n);","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.scss\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\n/**\n * Site root\n */\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\nregisterServiceWorker();\n","import React from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport './App.scss';\nimport Menu from './Navigation/Menu';\nimport About from './Page/About';\nimport Blog from './Page/Blog';\nimport Career from './Page/Career';\nimport Contacts from './Page/Contacts';\nimport Main from './Page/Main';\nimport NotFound from './Page/NotFound';\n\n/**\n * Main application\n */\nexport default () => (\n    <HashRouter>\n        <Menu/>\n        <div className='components-app__background'/>\n        <div className='flexBox flexColumn components-app__content'>\n            <Switch>\n                <Route exact={true} path='/' component={Main}/>\n                <Route path='/about' component={About}/>\n                <Route path='/blog' component={Blog}/>\n                <Route path='/career' component={Career}/>\n                <Route path='/contacts' component={Contacts}/>\n                <Route component={NotFound}/>\n            </Switch>\n        </div>\n        <div className='components-app__rights'>© 2019 All rights reserved</div>\n    </HashRouter>\n);\n"],"sourceRoot":""}