{"version":3,"sources":["resources/artyom.jpg","components/Navigation/Menu.tsx","components/Page/Container.tsx","components/Page/About.tsx","components/Utils/Const.ts","components/Utils/Date.ts","components/Utils/PagesCache.ts","components/Model/Source.ts","components/Navigation/LoadingIndicator.tsx","components/Page/AbstractPage.tsx","components/Page/Blog.tsx","components/Page/Career.tsx","components/Page/Contacts.tsx","components/Page/Main.tsx","registerServiceWorker.ts","index.tsx","components/App.tsx"],"names":["module","exports","className","id","to","isNarrow","window","innerWidth","Container","state","narrow","addEventListener","this","onResize","bind","removeEventListener","contentClass","props","title","content","setState","React","Component","items","bio","data","map","value","key","BLANK","REL","DateUtil","dateStr","arr","split","year","month","day","Date","parseInt","date","parseDateFromString","Intl","DateTimeFormat","format","PagesCache","cache","Map","instance","getTime","set","cached","get","undefined","REQUEST_CONFIG","headers","CACHE","getInstance","Source","pageName","baseUrl","cachedData","Promise","resolve","axios","then","catch","AbstractPage","loaded","source","getPageName","getBaseUrl","getTitle","getList","getContent","charAt","toUpperCase","substr","length","DATE_COMPARATOR","item1","item2","Blog","getItems","sort","item","href","link","target","rel","linkCaption","DATE_FORMAT","Career","site","start","end","string1","toLocaleDateString","endDate","prepareDates","startDate","post","description","tools","titles","contacts","LINKS","CONTENT_BLOCK","PAGE_CONTENT","src","img","alt","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","error","ReactDOM","render","exact","path","component","Main","About","Contacts","document","getElementById","URL","process","toString","origin","fetch","response","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.95cb68e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/artyom.bbb441b2.jpg\";","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './Menu.scss';\n\n/**\n * Navigation menu\n */\nexport default () => {\n    return (\n        <div className=\"flexBox nav-menu__root\" id=\"menu\">\n            <Link className=\"nav-menu__item\" to=\"/\">Main</Link>\n            <Link className=\"nav-menu__item\" to=\"/about\">About</Link>\n            <Link className=\"nav-menu__item\" to=\"/blog\">Blog</Link>\n            <Link className=\"nav-menu__item\" to=\"/career\">Career</Link>\n            <Link className=\"nav-menu__item\" to=\"/contacts\">Contacts</Link>\n        </div>\n    );\n}\n","import React, {ReactNode} from 'react';\nimport './Container.scss';\n\n/**\n * Container properties interface\n */\ninterface IProperties {\n    title?: string;\n    content: ReactNode;\n}\n\nconst isNarrow = () => window.innerWidth <= 800;\n\n/**\n * Page container with title\n */\nexport default class Container extends React.Component<IProperties> {\n    public state: { narrow: boolean } = {narrow: isNarrow()};\n\n    public componentDidMount() {\n        window.addEventListener('resize', this.onResize.bind(this));\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener('resize', this.onResize);\n    }\n\n    public render() {\n        const contentClass = `flexBox flexColumn page-container__root${this.state.narrow ? '--narrow' : ''}`;\n        return (\n            <div className={contentClass}>\n                {this.props.title && <h2>{this.props.title}</h2>}\n                <div>{this.props.content}</div>\n            </div>\n        );\n    }\n\n    private onResize() {\n        const narrow = isNarrow();\n        if (this.state.narrow !== narrow) {\n            this.setState({narrow});\n        }\n    }\n}\n\n\n","/**\n * About page\n */\nimport React from 'react';\nimport bio from '../../resources/bio.json';\nimport './About.scss';\nimport Container from './Container';\n\nconst items = bio.data.map((value: string, key: number) => {\n    return (\n        <div key={key} className='page-bio__item'>{value}</div>\n    );\n});\n\nexport default () => {\n    return <Container title='Artyom Ganev' content={items}/>;\n}","export const BLANK = '_blank';\n\nexport const REL = 'noopener noreferrer';","/**\n * Date utilities\n */\nexport default class DateUtil {\n\n    /**\n     * Create Date from date string.\n     * @param dateStr source string with %YYYY-MM-DD% format. Day is optional.\n     */\n    public static parseDateFromString(dateStr: string): Date | null {\n        if (!dateStr) {\n            return null;\n        }\n        const arr = dateStr.split('-');\n        const year = arr[0];\n        const month = arr[1];\n        const day = arr[2] || '1';\n        if (!year || !month) {\n            return null;\n        }\n        return new Date(parseInt(year, 10), parseInt(month, 10) - 1, parseInt(day, 10));\n    }\n\n    public static format(dateStr: string): string {\n        const date = DateUtil.parseDateFromString(dateStr);\n        return date\n            ? new Intl.DateTimeFormat('en-GB', {\n                day: '2-digit',\n                month: 'long',\n                year: 'numeric'\n            }).format(date)\n            : '';\n    }\n}","interface IValue {\n    value: unknown;\n    date: number;\n}\n\n/**\n * Simple memory cache for site pages\n * @singleton\n */\nexport default class PagesCache {\n\n    /**\n     * Get cache instance\n     */\n    public static getInstance(): PagesCache {\n        if (!PagesCache.instance) {\n            PagesCache.instance = new PagesCache();\n        }\n\n        return PagesCache.instance;\n    }\n\n    private static instance: PagesCache;\n    private cache: Map<string, IValue>;\n\n    private constructor() {\n        this.cache = new Map<string, IValue>();\n    }\n\n    /**\n     * Save value to cache\n     * @param key\n     * @param value to set\n     */\n    public set<T>(key: string, value: T): void {\n        const date = new Date().getTime();\n        this.cache.set(key, { value, date });\n    }\n\n    /**\n     * Get value from cache\n     * @param key\n     */\n    public get<T>(key: string): T | void {\n        const cached = this.cache.get(key);\n        return cached ? (cached.value as T) : undefined;\n    }\n}","import axios, { AxiosResponse } from 'axios';\nimport PagesCache from '../Utils/PagesCache';\n\nconst REQUEST_CONFIG = { headers: { 'x-requested-with': 'xhr' } };\nconst CACHE = PagesCache.getInstance();\n\n/**\n * Page source class\n * @abstract\n */\nexport default class Source<TPage = object> {\n   private readonly pageName: string;\n   private readonly baseUrl: string;\n\n   constructor(pageName: string, baseUrl: string) {\n      this.pageName = pageName;\n      this.baseUrl = baseUrl;\n   }\n\n   /**\n    * Get all records\n    */\n   public getList(): Promise<TPage[]> {\n      const cachedData = CACHE.get<TPage[]>(this.pageName);\n      if (cachedData) {\n         return Promise.resolve(cachedData);\n      }\n\n      return new Promise((resolve) => {\n         axios.get<TPage[]>(this.baseUrl, REQUEST_CONFIG)\n            .then(({ data }: AxiosResponse<TPage[]>) => {\n               CACHE.set<TPage[]>(this.pageName, data);\n               resolve(data);\n            })\n            .catch(() => resolve([]));\n      });\n   }\n\n   /**\n    * Get single record\n    * @param {String} id to find record\n    */\n   public getById(id: string): Promise<TPage> {\n      return new Promise((resolve) => {\n         axios.get<TPage>(`${this.baseUrl}/${id}`, REQUEST_CONFIG)\n            .then(({ data }: AxiosResponse<TPage>) => {\n               resolve(data);\n            })\n            .catch(() => resolve());\n      });\n   }\n}\n","import React from 'react';\nimport './LoadingIndicator.scss';\n\n/**\n * Simple loading indicator based on SVG-image\n */\nexport default () => (\n    <div className=\"flexBox flexGrow-1 flexShrink-1 justifyContentCenter\">\n        <div className=\"nav-loading__indicator\"/>\n    </div>\n);\n","import React, {ReactNode} from 'react';\nimport Source from '../Model/Source';\nimport LoadingIndicator from '../Navigation/LoadingIndicator';\nimport Container from './Container';\n\n/**\n * Base component for all pages with source\n * @abstract\n */\nexport default abstract class AbstractPage<TPage> extends React.Component {\n    public state: { items: TPage[] } = {items: []};\n    private loaded: boolean = false;\n    private readonly source: Source<TPage> = new Source<TPage>(this.getPageName(), this.getBaseUrl());\n    private readonly title: string = this.getTitle();\n\n    public componentDidMount(): void {\n        this.source.getList().then((items: TPage[]) => {\n            this.loaded = true;\n            this.setState({items});\n        });\n    }\n\n    public render(): ReactNode {\n        const content = this.loaded ? this.getContent() : <LoadingIndicator/>;\n        return <Container title={this.getTitle()} content={content}/>;\n    }\n\n    /**\n     * Get page name\n     */\n    protected abstract getPageName(): string;\n\n    /**\n     * Get page backend url\n     */\n    protected abstract getBaseUrl(): string;\n\n    /**\n     * Get page content\n     */\n    protected abstract getContent(): ReactNode;\n\n    /**\n     * Get page title\n     */\n    private getTitle(): string {\n        const pageName = this.getPageName();\n        return `${pageName.charAt(0).toUpperCase()}${pageName.substr(1, pageName.length - 1)}`;\n    }\n}\n","import React, {ReactNode} from 'react';\nimport IBlog from '../Model/IBlog';\nimport {BLANK, REL} from '../Utils/Const';\nimport DateUtil from '../Utils/Date';\nimport AbstractPage from './AbstractPage';\nimport './Blog.scss';\n\nconst DATE_COMPARATOR = (item1: IBlog, item2: IBlog): number => {\n    // TODO: Migrate to normal Date format https://github.com/Artyom-Ganev/artyom-ganev-src/issues/83\n    const date1 = DateUtil.parseDateFromString(`${item1.year}-${item1.month}-${item1.day}`) || new Date();\n    const date2 = DateUtil.parseDateFromString(`${item2.year}-${item2.month}-${item2.day}`) || new Date();\n    return date1 < date2 ? 1 : -1;\n};\n\nconst PAGE_NAME = 'blog';\nconst BASE_URL = `https://shielded-brushlands-46595.herokuapp.com/blog/`;\n\n/**\n * Blog page\n */\nexport default class Blog extends AbstractPage<IBlog> {\n\n    protected getContent(): ReactNode {\n        return <div className='flexBox flexColumn'>{this.getItems()}</div>;\n    }\n\n    protected getBaseUrl(): string {\n        return BASE_URL;\n    }\n\n    protected getPageName(): string {\n        return PAGE_NAME;\n    }\n\n    /**\n     * Blog items markup\n     */\n    private getItems() {\n        return this.state.items.sort(DATE_COMPARATOR).map((item: IBlog) => {\n            return (\n                <div key={item.id} className='page-blog__itemContainer'>\n                    <div\n                        className='page-blog__title'>{DateUtil.format(`${item.year}-${item.month}-${item.day}`)}</div>\n                    <div className='page-blog__item'>{item.title}</div>\n                    <a href={item.link} target={BLANK} rel={REL}>{item.linkCaption}</a>\n                </div>\n            );\n        });\n    }\n}\n","import React, {ReactNode} from 'react';\nimport ICareer from '../Model/ICareer';\nimport {BLANK, REL} from '../Utils/Const';\nimport AbstractPage from './AbstractPage';\nimport './Career.scss';\n\nconst DATE_FORMAT = {\n    month: 'long',\n    year: 'numeric'\n};\n\nconst PAGE_NAME = 'career';\nconst BASE_URL = `https://shielded-brushlands-46595.herokuapp.com/career/`;\n\n/**\n * Career dates formatting\n * @param {Date} start - Star date\n * @param {Date} end - End date\n */\nconst prepareDates = (start: Date, end: Date): string => {\n    if (start) {\n        const startDate = new Date(start);\n        const string1 = startDate.toLocaleDateString('en-US', DATE_FORMAT);\n        if (end) {\n            const endDate = new Date(end);\n            return `${string1} - ${endDate.toLocaleDateString('en-US', DATE_FORMAT)}`;\n        }\n        return `Since ${string1}`;\n    }\n    return '';\n};\n\n/**\n * Prepare Career item title. Wraps company name with link if site exists.\n * @param site - company site\n * @param title - company name\n */\nconst prepareTitle = (site: string | undefined, title: string | undefined) => {\n    if (site) {\n        return (\n            <a href={site} target={BLANK} rel={REL}>\n                <h3 className='page-career__title'>{title}</h3>\n            </a>\n        );\n    }\n    return <h3 className='page-career__title'>{title}</h3>;\n};\n\n/**\n * Career page\n */\nexport default class Career extends AbstractPage<ICareer> {\n    public state: { items: ICareer[] } = {items: []};\n\n    protected getBaseUrl(): string {\n        return BASE_URL;\n    }\n\n    protected getPageName(): string {\n        return PAGE_NAME;\n    }\n\n    protected getContent(): ReactNode {\n        /**\n         * Career items markup\n         */\n        const items = this.state.items.map((item: ICareer) => {\n            return (\n                <div key={item.id} className='page-career__item'>\n                    {prepareTitle(item.site, item.title)}\n                    <div className='page-career__dates'>{prepareDates(item.startDate, item.endDate)}</div>\n                    <div className=''>Post:&nbsp;{item.post}</div>\n                    <div className=''>{item.description}</div>\n                    <div className='flexBox flexColumn'>\n                        <div className=''>Tools:&nbsp;{item.tools}</div>\n                    </div>\n                </div>\n            );\n        });\n        return <div className='flexBox flexColumn'>{items}</div>;\n    }\n}\n","import React from 'react';\nimport contacts from '../../resources/contacts.json';\nimport {BLANK, REL} from \"../Utils/Const\";\nimport './Contacts.scss';\nimport Container from './Container';\n\n/**\n * Contact options interface\n */\ninterface IContact {\n    key: string;\n    value: string;\n    link: string;\n    title: string;\n}\n\n/**\n * Contacts titles markup\n */\nconst titles = contacts.data.map((item: IContact) => {\n    return <div key={item.key}>{item.value}:&nbsp;</div>;\n});\n\n/**\n * Contacts items markup\n */\nconst items = contacts.data.map((item: IContact) => {\n    return (\n        <div key={item.key}>\n            <a href={item.link} target={BLANK} rel={REL}>{item.title}</a>\n        </div>\n    );\n});\n\n/**\n * Page content\n */\nconst content = (\n    <div className='flexBox alignItemsBaseline justifyContentBetween page-contacts__root'>\n        <div>{titles}</div>\n        <div className='page-contacts__item'>{items}</div>\n    </div>\n);\n\n/**\n * Contacts page\n */\nexport default () => {\n    return <Container title='Contacts and Social' content={content}/>;\n}\n","import React from 'react';\nimport img from '../../resources/artyom.jpg';\nimport {BLANK, REL} from \"../Utils/Const\";\nimport Container from \"./Container\";\nimport './Main.scss';\n\nconst LINKS = {\n    Back: 'https://github.com/Artyom-Ganev/artyom-ganev-server',\n    Front: 'https://github.com/Artyom-Ganev/artyom-ganev-site',\n    Rybinsk: 'https://en.wikipedia.org/wiki/Rybinsk'\n};\n\nconst CONTENT_BLOCK = 'page-main__contentBlock';\n\n/**\n * Main page\n */\nconst PAGE_CONTENT = (\n    <div className='page-main__root'>\n        <img className='page-main__image' src={img} alt='Artyom' title='artyom.jpg'/>\n        <h2 className={CONTENT_BLOCK}>Hi! My name is Artyom.</h2>\n        <div className={CONTENT_BLOCK}>\n            I'm a programmer, based in&nbsp;\n            <a href={LINKS.Rybinsk} target={BLANK} rel={REL}>Rybinsk</a>,&nbsp;Russia. There are some facts\n            about me on this site.\n        </div>\n        <div className={CONTENT_BLOCK}>\n            You can contact me if you have some ideas for it's improvement or if you find some bugs, typos etc. I'm\n            still working on it.\n        </div>\n        <div className={CONTENT_BLOCK}>\n            Frontend of this site is based on React, TypeScript and Sass, the sources of this part are\n            located on GitHub&nbsp;\n            <a href={LINKS.Front} target={BLANK} rel={REL}>here</a>.\n        </div>\n        <div className={CONTENT_BLOCK}>\n            Backend uses Spring Boot, Maven, Heroku and PostgreSQL and is located&nbsp;\n            <a href={LINKS.Back} target={BLANK} rel={REL}>here</a>.\n        </div>\n    </div>\n);\n\nexport default () => <Container content={PAGE_CONTENT}/>;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.scss';\nimport registerServiceWorker from './registerServiceWorker';\n\n/**\n * Site root\n */\nReactDOM.render(<App/>, document.getElementById('root') as HTMLElement);\nregisterServiceWorker();","import React from 'react';\nimport {HashRouter, Route} from 'react-router-dom';\nimport './App.scss';\nimport Menu from './Navigation/Menu';\nimport About from './Page/About';\nimport Blog from './Page/Blog';\nimport Career from './Page/Career';\nimport Contacts from './Page/Contacts';\nimport Main from './Page/Main';\n\n/**\n * Main application\n */\nexport default () => {\n    return (\n        <HashRouter>\n            <Menu/>\n            <div className='components-app__background'/>\n            <div className='flexBox flexColumn components-app__content'>\n                <Route exact={true} path='/' component={Main}/>\n                <Route path='/about' component={About}/>\n                <Route path='/blog' component={Blog}/>\n                <Route path='/career' component={Career}/>\n                <Route path='/contacts' component={Contacts}/>\n            </div>\n            <div className='components-app__rights'>© 2019 All rights reserved</div>\n        </HashRouter>\n    );\n}\n"],"sourceRoot":""}